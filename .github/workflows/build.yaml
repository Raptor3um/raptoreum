---
name: Raptoreum Build
on:
  push:
    branches:
      - master
      - develop
      - 'ft/*'
      - 'release/*'
  pull_request:
    branches:
      - develop
env:
  COIN_NAME: raptoreum
  BUILD_DIR: raptoreum-build
  COMPRESS_DIR: raptoreum-compress
  TEST_LOG_ARTIFACT_DIR: test-logs

jobs:
  check-build-versioning:
    name: Check Build Versioning
    runs-on: ubuntu-latest
    steps:
      - name: Triggered By
        run: |
          echo "checking out $GITHUB_REF triggered by $GITHUB_EVENT_NAME"

      - name: Checkout
        uses: actions/checkout@v3

      - name: Read release-version
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master'}}
        id: release-version
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'release-version'

      - name: Read candidate-version
        if: ${{ github.event_name != 'pull_request' && contains(github.ref, 'release/')}}
        id: release-candidate-version
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'candidate-version'

      - name: Read snapshot-version
        if: ${{ github.event_name == 'pull_request' || endsWith(github.ref, 'develop') || contains(github.ref, 'ft/')}}
        id: snapshot-version
        uses: christian-draeger/read-properties@1.1.1
        with:
          path: build.properties
          properties: 'snapshot-version'

      - name: Create release-version
        if: ${{ github.event_name != 'pull_request' && github.ref == 'refs/heads/master'}}
        run: |
          echo "BUILD_VERSION=${{ steps.release-version.outputs.value }}" > version.txt

      - name: Create candidate-version
        if: ${{ github.event_name != 'pull_request' && contains(github.ref, 'release/')}}
        run: |
          echo "BUILD_VERSION=${{ steps.release-candidate-version.outputs.value }}" > version.txt

      - name: Create snapshot-version
        if: ${{ github.event_name == 'pull_request' || endsWith(github.ref, 'develop') || contains(github.ref, 'ft/')}}
        run: |
          echo "BUILD_VERSION=${{ steps.snapshot-version.outputs.value }}" > version.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: version
          path: version.txt

  build-ubuntu20:
    name: Ubuntu 20 Build
    needs: check-build-versioning
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip
          cp src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} $BUILD_DIR/
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_raptoreum ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/*

      - name: Run Unit Tests
        run: |
          mkdir -p ${TEST_LOG_ARTIFACT_DIR}
          ${BUILD_DIR}_not_strip/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: "Ubuntu 20 Test Report"
          # detailed_summary: true
          # include_passed: true
          report_paths: '**/unit_test_results.xml'

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --enable-debug
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz *          
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-debug-${BUILD_VERSION}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu20-not_strip-${BUILD_VERSION}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu20-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu20-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-ubuntu22:
    name: Ubuntu 22 Build
    needs: check-build-versioning
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          gcc --version
          make -C depends -j$(nproc)

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip
          cp src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} $BUILD_DIR/
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_raptoreum ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/*

      - name: Run Unit Tests
        run: |
          mkdir -p ${TEST_LOG_ARTIFACT_DIR}
          ${BUILD_DIR}_not_strip/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      - name: Publish Unit Test Report
        uses: mikepenz/action-junit-report@v3
        if: always() # always run even if the previous step fails
        with:
          check_name: "Ubuntu 22 Test Report"
          # detailed_summary: true
          # include_passed: true
          report_paths: '**/unit_test_results.xml'

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-pc-linux-gnu --disable-tests --enable-debug
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz *          
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-debug-${BUILD_VERSION}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-ubuntu22-not_strip-${BUILD_VERSION}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-ubuntu22-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-ubuntu20-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-ubuntu22-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-macos:
    name: macOS 11 Build
    needs: check-build-versioning
    runs-on: macos-11

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          brew install automake libtool pkg-config miniupnpc librsvg libnatpmp zeromq python
          pip3 install ds_store mac_alias

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc)

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-apple-darwin20.6.0

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR ${BUILD_DIR}_not_strip
          cp src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} $BUILD_DIR/
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_not_strip/
          mv src/test/test_raptoreum ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/*

      # - name: Run Unit Tests
      #   run: |
      #     mkdir -p ${TEST_LOG_ARTIFACT_DIR}
      #     ${BUILD_DIR}_not_strip/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      # - name: Publish Unit Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     check_name: "macOS 11 Test Report"
      #     detailed_summary: true
      #     include_passed: true
      #     report_paths: '**/unit_test_results.xml'

      - name: Generate Checksum and Compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          openssl sha256 * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz *
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          openssl sha256 * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-macos-not_strip-${BUILD_VERSION}.tar.gz *
          cd ..
          mkdir -p ${COMPRESS_DIR}
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `openssl sha256 ${COIN_NAME}-macos-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-macos-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `openssl sha256 ${COIN_NAME}-macos-not_strip-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cat checksums.txt
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-macos-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Generate Macos dmg files
        run: |
          make deploy
          mkdir -p macos-dmg
          mv Raptoreum-Qt.dmg macos-dmg/
          cd macos-dmg
          echo "sha256: `shasum Raptoreum-Qt.dmg`" >> checksums.txt
          echo "openssl-sha256: `openssl sha256 Raptoreum-Qt.dmg`" >> checksums.txt
          cd ..

      - name: Upload dmg file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-dmg-${{ env.BUILD_VERSION }}
          path: macos-dmg

  build-arm-32:
    name: ARM 32-bit Build
    needs: check-build-versioning
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool g++-arm-linux-gnueabihf autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=arm-linux-gnueabihf

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}/
          mv src/test/test_raptoreum ${BUILD_DIR}/

      # - name: Run Unit Tests
      #   run: |
      #     mkdir -p ${TEST_LOG_ARTIFACT_DIR}
      #     ${BUILD_DIR}/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      # - name: Publish Unit Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     check_name: "ARM 32-bit Test Report"
      #     detailed_summary: true
      #     include_passed: true
      #     report_paths: '**/unit_test_results.xml'

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/arm-linux-gnueabihf --disable-tests --enable-debug
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz *          
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm32-debug-${BUILD_VERSION}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-arm32-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm32-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm32-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

  build-arm-64:
    name: ARM 64-bit Build
    needs: check-build-versioning
    runs-on: ubuntu-18.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool g++-aarch64-linux-gnu autotools-dev automake pkg-config python3 bsdmainutils cmake

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=aarch64-linux-gnu

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}/
          mv src/test/test_raptoreum ${BUILD_DIR}/

      # - name: Run Unit Tests
      #   run: |
      #     mkdir -p ${TEST_LOG_ARTIFACT_DIR}
      #     ${BUILD_DIR}/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      # - name: Publish Unit Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     check_name: "ARM 64-bit Test Report"
      #     detailed_summary: true
      #     include_passed: true
      #     report_paths: '**/unit_test_results.xml'

      - name: Build Debug Binaries
        run: |
          make clean
          make distclean
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/aarch64-linux-gnu --disable-tests --enable-debug
          make -j$(nproc)
          mkdir -p ${BUILD_DIR}_debug
          mv src/{raptoreum-cli,raptoreum-tx,raptoreumd,qt/raptoreum-qt} ${BUILD_DIR}_debug/

      - name: Generate Checksum and Compress
        run: |
          mkdir -p ${COMPRESS_DIR}
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz *          
          cd ../${BUILD_DIR}_debug
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          tar -cvzf ../${COIN_NAME}-arm64-debug-${BUILD_VERSION}.tar.gz *
          cd ..
          mv *.tar.gz ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-arm64-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-arm64-debug-${BUILD_VERSION}.tar.gz`" >> checksums.txt
          cd ..
          cat ${COMPRESS_DIR}/checksums.txt

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-arm64-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}
  
  build-win:
    name: Win64 Build
    needs: check-build-versioning
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Getting Version
        uses: actions/download-artifact@v1
        with:
          name: version

      - name: Extract version
        run: |
          cat version/version.txt >> $GITHUB_ENV

      - name: Install Required Packages
        run: |
          sudo apt-get update -y
          sudo apt-get upgrade -y
          sudo apt-get install curl build-essential libtool autotools-dev automake pkg-config python3 bsdmainutils cmake
          sudo apt-get install -y g++-mingw-w64-x86-64 gcc-mingw-w64-x86-64 nsis
          sudo update-alternatives --set x86_64-w64-mingw32-gcc /usr/bin/x86_64-w64-mingw32-gcc-posix
          sudo update-alternatives --set x86_64-w64-mingw32-g++ /usr/bin/x86_64-w64-mingw32-g++-posix

      - name: Build Depends
        run: |
          echo "building with $(nproc) threads"
          make -C depends -j$(nproc) HOST=x86_64-w64-mingw32

      - name: Configure
        run: |
          ./autogen.sh
          ./configure --prefix=`pwd`/depends/x86_64-w64-mingw32

      - name: Build Binaries
        run: |
          make -j$(nproc)
          mkdir -p $BUILD_DIR
          mkdir -p ${BUILD_DIR}_not_strip
          cp src/{raptoreum-cli.exe,raptoreum-tx.exe,raptoreumd.exe,qt/raptoreum-qt.exe} $BUILD_DIR/
          mv src/{raptoreum-cli.exe,raptoreum-tx.exe,raptoreumd.exe,qt/raptoreum-qt.exe} ${BUILD_DIR}_not_strip/
          # mv src/test/test_raptoreum ${BUILD_DIR}_not_strip/
          strip $BUILD_DIR/*

      # - name: Run Unit Tests
      #   run: |
      #     mkdir -p ${TEST_LOG_ARTIFACT_DIR}
      #     ${BUILD_DIR}_not_strip/test_raptoreum --log_format=JUNIT > ${TEST_LOG_ARTIFACT_DIR}/unit_test_results.xml

      # - name: Publish Unit Test Report
      #   uses: mikepenz/action-junit-report@v3
      #   if: always() # always run even if the previous step fails
      #   with:
      #     check_name: "Win64 Test Report"
      #     detailed_summary: true
      #     include_passed: true
      #     report_paths: '**/unit_test_results.xml'

      - name: Generate Checksum and Compress
        run: |
          echo "buildng $BUILD_VERSION version"
          cd $BUILD_DIR
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          zip -r ../${COIN_NAME}-win-${BUILD_VERSION}.zip .
          cd ../${BUILD_DIR}_not_strip
          echo "sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          shasum * >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          echo "openssl-sha256:" >> checksums.txt
          echo "------------------------------------" >> checksums.txt
          sha256sum * >> checksums.txt
          cat checksums.txt
          zip -r ../${COIN_NAME}-win-not_strip-${BUILD_VERSION}.zip .
          cd ..
          mkdir -p ${COMPRESS_DIR}
          mv *.zip ${COMPRESS_DIR}/
          cd ${COMPRESS_DIR}
          echo "sha256: `shasum ${COIN_NAME}-win-${BUILD_VERSION}.zip`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-win-${BUILD_VERSION}.zip`" >> checksums.txt
          echo "sha256: `shasum ${COIN_NAME}-win-not_strip-${BUILD_VERSION}.zip`" >> checksums.txt
          echo "openssl-sha256: `sha256sum ${COIN_NAME}-win-not_strip-${BUILD_VERSION}.zip`" >> checksums.txt
          cat checksums.txt
          cd ..

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-${{ env.BUILD_VERSION }}
          path: ${{ env.COMPRESS_DIR }}

      - name: Generate window installation file
        run: |
          make deploy
          mkdir win64-installation
          mv *.exe win64-installation/
          cd win64-installation
          echo "sha256: `shasum *.exe`" >> checksums.txt
          echo "openssl-sha25: `sha256sum *.exe`" >> checksums.txt
          cd ..

      - name: Upload Win64 installation file
        uses: actions/upload-artifact@v3
        with:
          name: ${{ env.COIN_NAME }}-win-installation-${{ env.BUILD_VERSION }}
          path: win64-installation
