# Copyright (c) 2013-2016 The Bitcoin Core developers
# Copyright (c) 2014-2018 The Dash Core developers
# Copyright (c) 2020-2022 The Raptoreum developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

TESTS += test/test_raptoreum
bin_PROGRAMS += test/test_raptoreum
#noinst_PROGRAMS += test/test_raptoreum_fuzzy
TEST_SRCDIR = test
TEST_BINARY=test/test_raptoreum$(EXEEXT)

JSON_TEST_FILES = \
  test/data/blockfilters.json \
  test/data/base58_encode_decode.json \
  test/data/bip39_vectors.json \
  test/data/key_io_valid.json \
  test/data/key_io_invalid.json \
  test/data/proposals_valid.json \
  test/data/proposals_invalid.json \
  test/data/script_tests.json \
  test/data/sighash.json \
  test/data/tx_invalid.json \
  test/data/tx_valid.json

RAW_TEST_FILES = \
  test/data/asmap.raw

GENERATED_TEST_FILES = $(JSON_TEST_FILES:.json=.json.h) $(RAW_TEST_FILES:.raw=.raw.h)

# test_raptoreum binary #
BITCOIN_TESTS =\
  test/arith_uint256_tests.cpp \
  test/scriptnum10.h \
  test/addrman_tests.cpp \
  test/amount_tests.cpp \
  test/allocator_tests.cpp \
  test/assets_tests.cpp \
  test/base32_tests.cpp \
  test/base58_tests.cpp \
  test/base64_tests.cpp \
  test/bech32_tests.cpp \
  test/bip32_tests.cpp \
  test/bip39_tests.cpp \
  test/blockchain_tests.cpp \
  test/blockencodings_tests.cpp \
  test/blockfilter_tests.cpp \
  test/bloom_tests.cpp \
  test/bls_tests.cpp \
  test/bswap_tests.cpp \
  test/checkdatasig_tests.cpp \
  test/checkqueue_tests.cpp \
  test/cachemap_tests.cpp \
  test/cachemultimap_tests.cpp \
  test/coins_tests.cpp \
  test/compress_tests.cpp \
  test/cn_tests.cpp \
  test/crypto_tests.cpp \
  test/cuckoocache_tests.cpp \
  test/denialofservice_tests.cpp \
  test/dip0020opcodes_tests.cpp \
  test/descriptor_tests.cpp \
  test/evo_deterministicmns_tests.cpp \
  test/evo_simplifiedmns_tests.cpp \
  test/flatfile_tests.cpp \
  test/fs_tests.cpp \
  test/getarg_tests.cpp \
  test/governance_validators_tests.cpp \
  test/hash_tests.cpp \
  test/key_io_tests.cpp \
  test/key_tests.cpp \
  test/lcg.h \
  test/limitedmap_tests.cpp \
  test/dbwrapper_tests.cpp \
  test/main_tests.cpp \
  test/mempool_tests.cpp \
  test/merkle_tests.cpp \
  test/merkleblock_tests.cpp \
  test/miner_tests.cpp \
  test/multisig_tests.cpp \
  test/net_tests.cpp \
  test/netbase_tests.cpp \
  test/pmt_tests.cpp \
  test/policyestimator_tests.cpp \
  test/pow_tests.cpp \
  test/prevector_tests.cpp \
  test/raii_event_tests.cpp \
  test/random_tests.cpp \
  test/ref_tests.cpp \
  test/ratecheck_tests.cpp \
  test/reverselock_tests.cpp \
  test/rpc_tests.cpp \
  test/sanity_tests.cpp \
  test/scheduler_tests.cpp \
  test/script_p2sh_tests.cpp \
  test/script_p2pk_tests.cpp \
  test/script_p2pkh_tests.cpp \
  test/script_tests.cpp \
  test/script_standard_tests.cpp \
  test/scriptnum_tests.cpp \
  test/serialize_tests.cpp \
  test/sighash_tests.cpp \
  test/sigopcount_tests.cpp \
  test/skiplist_tests.cpp \
  test/streams_tests.cpp \
  test/subsidy_tests.cpp \
  test/test_raptoreum.cpp \
  test/test_raptoreum.h \
  test/test_raptoreum_main.cpp \
  test/util_threadnames_tests.cpp \
  test/timedata_tests.cpp \
  test/torcontrol_tests.cpp \
  test/transaction_tests.cpp \
  test/txindex_tests.cpp \
  test/txvalidation_tests.cpp \
  test/txvalidationcache_tests.cpp \
  test/uint256_tests.cpp \
  test/util_tests.cpp

if ENABLE_WALLET
BITCOIN_TESTS += \
  wallet/test/coinjoin_tests.cpp \
  wallet/test/wallet_test_fixture.cpp \
  wallet/test/db_tests.cpp \
  wallet/test/wallet_tests.cpp \
  wallet/test/wallet_crypto_tests.cpp \
  wallet/test/coinselector_tests.cpp
endif

test_test_raptoreum_SOURCES = $(BITCOIN_TESTS) $(JSON_TEST_FILES) $(RAW_TEST_FILES)
test_test_raptoreum_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES) $(TESTDEFS) $(EVENT_CFLAGS)
test_test_raptoreum_LDADD =
if ENABLE_WALLET
test_test_raptoreum_LDADD += $(LIBBITCOIN_WALLET)
endif
test_test_raptoreum_LDADD += $(LIBBITCOIN_SERVER) $(LIBBITCOIN_CLI) $(LIBBITCOIN_COMMON) $(LIBBITCOIN_UTIL) $(LIBBITCOIN_CONSENSUS) \
                             $(LIBBITCOIN_CRYPTO) $(LIBDASHBLS) $(LIBUNIVALUE) $(LIBLEVELDB) $(LIBMEMENV) $(BACKTRACE_LIB) $(BOOST_LIBS) \
                             $(LIBSECP256K1) $(EVENT_LIBS) $(EVENT_PTHREADS_LIBS)
test_test_raptoreum_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)

test_test_raptoreum_LDADD += $(BDB_LIBS) $(MINIUPNPC_LIBS) $(NATPMP_LIBS) $(EVENT_PTHREADS_LIBS) $(EVENT_LIBS) $(BLS_LIBS) $(GMP_LIBS)
test_test_raptoreum_LDFLAGS = $(LDFLAGS_WRAP_EXCEPTIONS) $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(PTHREAD_FLAGS) -static

if ENABLE_ZMQ
test_test_raptoreum_LDADD += $(ZMQ_LIBS)
endif
#

# test_raptoreum_fuzzy binary #
#test_test_raptoreum_fuzzy_SOURCES = test/test_raptoreum_fuzzy.cpp
#test_test_raptoreum_fuzzy_CPPFLAGS = $(AM_CPPFLAGS) $(BITCOIN_INCLUDES)
#test_test_raptoreum_fuzzy_CXXFLAGS = $(AM_CXXFLAGS) $(PIE_FLAGS)
#test_test_raptoreum_fuzzy_LDFLAGS = $(LDFLAGS_WRAP_EXCEPTIONS) $(RELDFLAGS) $(AM_LDFLAGS) $(LIBTOOL_APP_LDFLAGS) $(PTHREAD_FLAGS)

#test_test_raptoreum_fuzzy_LDADD = \
  $(LIBUNIVALUE) \
  $(LIBBITCOIN_SERVER) \
  $(LIBBITCOIN_COMMON) \
  $(LIBBITCOIN_UTIL) \
  $(LIBBITCOIN_CONSENSUS) \
  $(LIBBITCOIN_CRYPTO) \
  $(LIBDASHBLS) \
  $(LIBBITCOIN_CRYPTO_SSE41) \
  $(LIBBITCOIN_CRYPTO_AVX2) \
  $(LIBBITCOIN_CRYPTO_SHANI) \
  $(LIBSECP256K1)

#test_test_raptoreum_fuzzy_LDADD += $(BOOST_LIBS) $(BACKTRACE_LIB)
#

nodist_test_test_raptoreum_SOURCES = $(GENERATED_TEST_FILES)

$(BITCOIN_TESTS): $(GENERATED_TEST_FILES)

CLEAN_BITCOIN_TEST = test/*.gcda test/*.gcno $(GENERATED_TEST_FILES)

CLEANFILES += $(CLEAN_BITCOIN_TEST)

raptoreum_test: $(TEST_BINARY)

raptoreum_test_check: $(TEST_BINARY) FORCE
	$(MAKE) check-TESTS TESTS=$^

raptoreum_test_clean : FORCE
	rm -f $(CLEAN_BITCOIN_TEST) $(test_test_raptoreum_OBJECTS) $(TEST_BINARY)

check-local:
	@echo "Running test/util/bitcoin-util-test.py..."
	$(PYTHON) $(top_builddir)/test/util/bitcoin-util-test.py
	@echo "Running test/util/rpcauth-test.py..."
	$(PYTHON) $(top_builddir)/test/util/rpcauth-test.py
	$(AM_V_at)$(MAKE) $(AM_MAKEFLAGS) -C secp256k1 check

UNIVALUE_TESTS = univalue/test/object univalue/test/unitester univalue/test/no_nul
noinst_PROGRAMS += $(UNIVALUE_TESTS)
TESTS += $(UNIVALUE_TESTS)

univalue_test_unitester_SOURCES = $(UNIVALUE_TEST_UNITESTER_INT)
univalue_test_unitester_LDADD = $(LIBUNIVALUE)
univalue_test_unitester_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT) -DJSON_TEST_SRC=\"$(srcdir)/$(UNIVALUE_TEST_DATA_DIR_INT)\"
univalue_test_unitester_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)

univalue_test_no_nul_SOURCES = $(UNIVALUE_TEST_NO_NUL_INT)
univalue_test_no_nul_LDADD = $(LIBUNIVALUE)
univalue_test_no_nul_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT)
univalue_test_no_nul_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)

univalue_test_object_SOURCES = $(UNIVALUE_TEST_OBJECT_INT)
univalue_test_object_LDADD = $(LIBUNIVALUE)
univalue_test_object_CPPFLAGS = -I$(srcdir)/$(UNIVALUE_INCLUDE_DIR_INT)
univalue_test_object_LDFLAGS = -static $(LIBTOOL_APP_LDFLAGS)

%.cpp.test: %.cpp
	@echo Running tests: $$(\
		cat $< | \
		grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | \
	  cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1\
	) from $<
	$(AM_V_at)export TEST_LOGFILE=$(abs_builddir)/$$(\
	  echo $< | grep -E -o "(wallet/test/.*\.cpp|test/.*\.cpp)" | $(SED) -e s/\.cpp/.log/ \
	) && \
	$(TEST_BINARY) --catch_system_errors=no -l test_suite -t "$$(\
	  cat $< | \
	  grep -E "(BOOST_FIXTURE_TEST_SUITE\\(|BOOST_AUTO_TEST_SUITE\\()" | \
	  cut -d '(' -f 2 | cut -d ',' -f 1 | cut -d ')' -f 1\
	)" -- DEBUG_LOG_OUT > "$$TEST_LOGFILE" 2>&1 || (cat "$$TEST_LOGFILE" && false)

test/data/%.json.h: test/data/%.json
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace json_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"

test/data/%.raw.h: test/data/%.raw
	@$(MKDIR_P) $(@D)
	@{ \
	 echo "namespace raw_tests{" && \
	 echo "static unsigned const char $(*F)[] = {" && \
	 $(HEXDUMP) -v -e '8/1 "0x%02x, "' -e '"\n"' $< | $(SED) -e 's/0x  ,//g' && \
	 echo "};};"; \
	} > "$@.new" && mv -f "$@.new" "$@"
	@echo "Generated $@"